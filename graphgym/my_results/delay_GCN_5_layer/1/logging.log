GraphGymModule(
  (model): GNN(
    (encoder): FeatureEncoder(
      (node_encoder): AtomEncoder(
        (atom_embedding_list): ModuleList(
          (0): Embedding(119, 300)
          (1): Embedding(4, 300)
          (2): Embedding(12, 300)
          (3): Embedding(12, 300)
          (4): Embedding(10, 300)
          (5): Embedding(6, 300)
          (6): Embedding(6, 300)
          (7): Embedding(2, 300)
          (8): Embedding(2, 300)
        )
      )
      (node_encoder_bn): BatchNorm1dNode(
        (bn): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (edge_encoder): BondEncoder(
        (bond_embedding_list): ModuleList(
          (0): Embedding(5, 300)
          (1): Embedding(6, 300)
          (2): Embedding(2, 300)
        )
      )
      (edge_encoder_bn): BatchNorm1dNode(
        (bn): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (pre_mp): GeneralMultiLayer(
      (Layer_0): GeneralLayer(
        (layer): Linear(
          (model): Linear(300, 300, bias=False)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (mp): DelayGNNStage(
      (W_k1_t0): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k1_t1): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k2_t1): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k1_t2): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k2_t2): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k3_t2): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k1_t3): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k2_t3): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k3_t3): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k4_t3): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k1_t4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k2_t4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k3_t4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k4_t4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (W_k5_t4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (post_mp): GNNGraphHead(
      (layer_post_mp): MLP(
        (model): Sequential(
          (0): Linear(
            (model): Linear(300, 1, bias=True)
          )
        )
      )
    )
  )
)
accelerator: cuda
benchmark: False
bn:
  eps: 1e-05
  mom: 0.1
cfg_dest: config.yaml
custom_metrics: []
dataset:
  cache_load: False
  cache_save: False
  dir: ./datasets
  edge_dim: 128
  edge_encoder: True
  edge_encoder_bn: True
  edge_encoder_name: Bond
  edge_message_ratio: 0.8
  edge_negative_sampling_ratio: 1.0
  edge_train_mode: all
  encoder: True
  encoder_bn: True
  encoder_dim: 128
  encoder_name: db
  format: OGB
  label_column: none
  label_table: none
  location: local
  name: ogbg-molhiv
  node_encoder: True
  node_encoder_bn: True
  node_encoder_name: Atom
  remove_feature: False
  resample_disjoint: False
  resample_negative: False
  shuffle_split: True
  split: [0.8, 0.1, 0.1]
  split_mode: random
  task: graph
  task_type: classification
  to_undirected: False
  transductive: False
  transform: none
  tu_simple: True
delay:
  max_k: 5
  num_layers: 10
devices: None
gnn:
  act: prelu
  agg: mean
  att_final_linear: False
  att_final_linear_bn: False
  att_heads: 1
  batchnorm: True
  clear_feature: True
  dim_inner: 300
  dropout: 0.0
  head: graph
  keep_edge: 0.5
  l2norm: True
  layer_type: my_gcnconv
  layers_mp: 5
  layers_post_mp: 1
  layers_pre_mp: 1
  msg_direction: single
  normalize_adj: False
  self_msg: concat
  skip_every: 1
  stage_type: delay_gnn
gpu_mem: False
mem:
  inplace: False
metric_agg: argmax
metric_best: auto
model:
  edge_decoding: dot
  graph_pooling: add
  loss_fun: cross_entropy
  match_upper: True
  size_average: mean
  thresh: 0.5
  type: gnn
num_threads: 6
num_workers: 0
optim:
  base_lr: 0.01
  lr_decay: 0.1
  max_epoch: 20
  momentum: 0.9
  optimizer: adam
  scheduler: cos
  steps: [30, 60, 90]
  weight_decay: 0.0005
out_dir: my_results/delay_GCN_5_layer
params: 1506917
print: both
round: 4
run_dir: my_results/delay_GCN_5_layer/1
seed: 2
share:
  dim_in: 9
  dim_out: 2
  num_splits: 3
tensorboard_agg: True
tensorboard_each_run: False
train:
  auto_resume: False
  batch_size: 128
  ckpt_clean: True
  ckpt_period: 100
  enable_ckpt: True
  epoch_resume: -1
  eval_period: 1
  iter_per_epoch: 32
  neighbor_sizes: [20, 15, 10, 5]
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
  skip_train_eval: False
  walk_length: 4
val:
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
view_emb: False
Num parameters: 1506917
val: {'epoch': 0, 'loss': 0.3747, 'lr': 0.01, 'params': 1506917, 'time_iter': 0.6039, 'accuracy': 0.9844, 'average_precision': 0.0156, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.256}
val: {'epoch': 0, 'loss': 0.1348, 'lr': 0.0099, 'params': 1506917, 'time_iter': 7.0626, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.3515}
train: {'epoch': 0, 'eta': 276912.8769, 'loss': 0.2241, 'lr': 0.0099, 'params': 1506917, 'time_iter': 56.4898, 'accuracy': 0.9603, 'average_precision': 0.0377, 'precision': 0.0805, 'recall': 0.0057, 'f1': 0.0106, 'auc': 0.4773}
val: {'epoch': 1, 'loss': 0.108, 'lr': 0.0098, 'params': 1506917, 'time_iter': 6.8992, 'accuracy': 0.9801, 'average_precision': 0.0236, 'precision': 0.3333, 'recall': 0.0123, 'f1': 0.0238, 'auc': 0.5503}
train: {'epoch': 1, 'eta': 260676.4792, 'loss': 0.1732, 'lr': 0.0098, 'params': 1506917, 'time_iter': 55.774, 'accuracy': 0.9628, 'average_precision': 0.0454, 'precision': 0.7368, 'recall': 0.0114, 'f1': 0.0224, 'auc': 0.5547}
val: {'epoch': 2, 'loss': 0.0958, 'lr': 0.0095, 'params': 1506917, 'time_iter': 6.886, 'accuracy': 0.9815, 'average_precision': 0.0817, 'precision': 0.8571, 'recall': 0.0741, 'f1': 0.1364, 'auc': 0.6198}
train: {'epoch': 2, 'eta': 245500.522, 'loss': 0.1565, 'lr': 0.0095, 'params': 1506917, 'time_iter': 55.6572, 'accuracy': 0.9632, 'average_precision': 0.0596, 'precision': 0.6567, 'recall': 0.0357, 'f1': 0.0677, 'auc': 0.6395}
val: {'epoch': 3, 'loss': 0.0992, 'lr': 0.009, 'params': 1506917, 'time_iter': 7.0075, 'accuracy': 0.9801, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.652}
train: {'epoch': 3, 'eta': 230714.6432, 'loss': 0.1511, 'lr': 0.009, 'params': 1506917, 'time_iter': 55.6397, 'accuracy': 0.9632, 'average_precision': 0.0626, 'precision': 0.6341, 'recall': 0.0422, 'f1': 0.0791, 'auc': 0.6594}
val: {'epoch': 4, 'loss': 0.1059, 'lr': 0.0085, 'params': 1506917, 'time_iter': 6.9364, 'accuracy': 0.9815, 'average_precision': 0.0944, 'precision': 0.6923, 'recall': 0.1111, 'f1': 0.1915, 'auc': 0.7178}
train: {'epoch': 4, 'eta': 216473.148, 'loss': 0.1444, 'lr': 0.0085, 'params': 1506917, 'time_iter': 56.1204, 'accuracy': 0.9641, 'average_precision': 0.086, 'precision': 0.6947, 'recall': 0.0739, 'f1': 0.1335, 'auc': 0.6888}
val: {'epoch': 5, 'loss': 0.0901, 'lr': 0.0079, 'params': 1506917, 'time_iter': 6.9208, 'accuracy': 0.9813, 'average_precision': 0.0681, 'precision': 1.0, 'recall': 0.0494, 'f1': 0.0941, 'auc': 0.6233}
train: {'epoch': 5, 'eta': 201976.0824, 'loss': 0.1423, 'lr': 0.0079, 'params': 1506917, 'time_iter': 55.8274, 'accuracy': 0.9641, 'average_precision': 0.0892, 'precision': 0.6623, 'recall': 0.0828, 'f1': 0.1472, 'auc': 0.6963}
val: {'epoch': 6, 'loss': 0.1669, 'lr': 0.0073, 'params': 1506917, 'time_iter': 6.928, 'accuracy': 0.9679, 'average_precision': 0.09, 'precision': 0.2475, 'recall': 0.3086, 'f1': 0.2747, 'auc': 0.7114}
train: {'epoch': 6, 'eta': 187538.4053, 'loss': 0.1428, 'lr': 0.0073, 'params': 1506917, 'time_iter': 55.8955, 'accuracy': 0.9643, 'average_precision': 0.0924, 'precision': 0.6887, 'recall': 0.0844, 'f1': 0.1504, 'auc': 0.6891}
val: {'epoch': 7, 'loss': 0.1033, 'lr': 0.0065, 'params': 1506917, 'time_iter': 6.9361, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.4494}
train: {'epoch': 7, 'eta': 173129.2757, 'loss': 0.1404, 'lr': 0.0065, 'params': 1506917, 'time_iter': 55.9585, 'accuracy': 0.9644, 'average_precision': 0.0984, 'precision': 0.6743, 'recall': 0.0958, 'f1': 0.1677, 'auc': 0.7047}
val: {'epoch': 8, 'loss': 0.0841, 'lr': 0.0058, 'params': 1506917, 'time_iter': 6.9191, 'accuracy': 0.9823, 'average_precision': 0.1175, 'precision': 0.9, 'recall': 0.1111, 'f1': 0.1978, 'auc': 0.7295}
train: {'epoch': 8, 'eta': 158628.7881, 'loss': 0.141, 'lr': 0.0058, 'params': 1506917, 'time_iter': 55.6887, 'accuracy': 0.9642, 'average_precision': 0.0943, 'precision': 0.6514, 'recall': 0.0925, 'f1': 0.162, 'auc': 0.7121}
val: {'epoch': 9, 'loss': 0.0973, 'lr': 0.005, 'params': 1506917, 'time_iter': 6.9188, 'accuracy': 0.9793, 'average_precision': 0.0745, 'precision': 0.4231, 'recall': 0.1358, 'f1': 0.2056, 'auc': 0.7238}
train: {'epoch': 9, 'eta': 144149.0095, 'loss': 0.1396, 'lr': 0.005, 'params': 1506917, 'time_iter': 55.666, 'accuracy': 0.964, 'average_precision': 0.0923, 'precision': 0.6298, 'recall': 0.0925, 'f1': 0.1614, 'auc': 0.7238}
val: {'epoch': 10, 'loss': 0.0882, 'lr': 0.0042, 'params': 1506917, 'time_iter': 6.9312, 'accuracy': 0.9813, 'average_precision': 0.0944, 'precision': 0.625, 'recall': 0.1235, 'f1': 0.2062, 'auc': 0.7529}
train: {'epoch': 10, 'eta': 129681.0193, 'loss': 0.1369, 'lr': 0.0042, 'params': 1506917, 'time_iter': 55.6202, 'accuracy': 0.9652, 'average_precision': 0.1155, 'precision': 0.7194, 'recall': 0.1144, 'f1': 0.1975, 'auc': 0.7313}
val: {'epoch': 11, 'loss': 0.1182, 'lr': 0.0035, 'params': 1506917, 'time_iter': 6.887, 'accuracy': 0.9759, 'average_precision': 0.0947, 'precision': 0.3393, 'recall': 0.2346, 'f1': 0.2774, 'auc': 0.7384}
train: {'epoch': 11, 'eta': 115271.1553, 'loss': 0.1354, 'lr': 0.0035, 'params': 1506917, 'time_iter': 55.8438, 'accuracy': 0.9651, 'average_precision': 0.1146, 'precision': 0.7065, 'recall': 0.1153, 'f1': 0.1982, 'auc': 0.7405}
val: {'epoch': 12, 'loss': 0.1159, 'lr': 0.0027, 'params': 1506917, 'time_iter': 6.9089, 'accuracy': 0.9786, 'average_precision': 0.1083, 'precision': 0.4186, 'recall': 0.2222, 'f1': 0.2903, 'auc': 0.7621}
train: {'epoch': 12, 'eta': 100849.8217, 'loss': 0.1331, 'lr': 0.0027, 'params': 1506917, 'time_iter': 55.7589, 'accuracy': 0.9651, 'average_precision': 0.1171, 'precision': 0.6963, 'recall': 0.1209, 'f1': 0.2061, 'auc': 0.7491}
val: {'epoch': 13, 'loss': 0.0805, 'lr': 0.0021, 'params': 1506917, 'time_iter': 6.9315, 'accuracy': 0.9823, 'average_precision': 0.1165, 'precision': 1.0, 'recall': 0.0988, 'f1': 0.1798, 'auc': 0.7514}
train: {'epoch': 13, 'eta': 86416.3374, 'loss': 0.131, 'lr': 0.0021, 'params': 1506917, 'time_iter': 55.6031, 'accuracy': 0.9651, 'average_precision': 0.1178, 'precision': 0.6927, 'recall': 0.1226, 'f1': 0.2083, 'auc': 0.7628}
val: {'epoch': 14, 'loss': 0.0875, 'lr': 0.0015, 'params': 1506917, 'time_iter': 6.9157, 'accuracy': 0.9813, 'average_precision': 0.0944, 'precision': 0.625, 'recall': 0.1235, 'f1': 0.2062, 'auc': 0.7271}
train: {'epoch': 14, 'eta': 72008.0705, 'loss': 0.1296, 'lr': 0.0015, 'params': 1506917, 'time_iter': 55.76, 'accuracy': 0.965, 'average_precision': 0.1219, 'precision': 0.664, 'recall': 0.1347, 'f1': 0.224, 'auc': 0.768}
val: {'epoch': 15, 'loss': 0.0938, 'lr': 0.001, 'params': 1506917, 'time_iter': 6.9172, 'accuracy': 0.9808, 'average_precision': 0.1271, 'precision': 0.5312, 'recall': 0.2099, 'f1': 0.3009, 'auc': 0.7489}
train: {'epoch': 15, 'eta': 57582.1863, 'loss': 0.127, 'lr': 0.001, 'params': 1506917, 'time_iter': 55.4439, 'accuracy': 0.9653, 'average_precision': 0.1267, 'precision': 0.6732, 'recall': 0.1404, 'f1': 0.2324, 'auc': 0.7781}
val: {'epoch': 16, 'loss': 0.093, 'lr': 0.0005, 'params': 1506917, 'time_iter': 6.9623, 'accuracy': 0.9793, 'average_precision': 0.0919, 'precision': 0.4375, 'recall': 0.1728, 'f1': 0.2478, 'auc': 0.7211}
train: {'epoch': 16, 'eta': 43179.8609, 'loss': 0.1243, 'lr': 0.0005, 'params': 1506917, 'time_iter': 55.6478, 'accuracy': 0.9659, 'average_precision': 0.1417, 'precision': 0.6964, 'recall': 0.1583, 'f1': 0.2579, 'auc': 0.7903}
val: {'epoch': 17, 'loss': 0.0861, 'lr': 0.0002, 'params': 1506917, 'time_iter': 6.9693, 'accuracy': 0.9813, 'average_precision': 0.1, 'precision': 0.6111, 'recall': 0.1358, 'f1': 0.2222, 'auc': 0.6968}
train: {'epoch': 17, 'eta': 28792.8141, 'loss': 0.1226, 'lr': 0.0002, 'params': 1506917, 'time_iter': 56.0056, 'accuracy': 0.9658, 'average_precision': 0.1389, 'precision': 0.692, 'recall': 0.155, 'f1': 0.2533, 'auc': 0.7987}
val: {'epoch': 18, 'loss': 0.0856, 'lr': 0.0001, 'params': 1506917, 'time_iter': 6.9756, 'accuracy': 0.9808, 'average_precision': 0.0917, 'precision': 0.55, 'recall': 0.1358, 'f1': 0.2178, 'auc': 0.6888}
train: {'epoch': 18, 'eta': 14405.2261, 'loss': 0.1206, 'lr': 0.0001, 'params': 1506917, 'time_iter': 56.4495, 'accuracy': 0.9662, 'average_precision': 0.1508, 'precision': 0.7023, 'recall': 0.1705, 'f1': 0.2743, 'auc': 0.8073}
val: {'epoch': 19, 'loss': 0.0854, 'lr': 0.0, 'params': 1506917, 'time_iter': 6.9881, 'accuracy': 0.9803, 'average_precision': 0.0909, 'precision': 0.5, 'recall': 0.1481, 'f1': 0.2286, 'auc': 0.6827}
train: {'epoch': 19, 'eta': 0.0, 'loss': 0.1195, 'lr': 0.0, 'params': 1506917, 'time_iter': 55.9859, 'accuracy': 0.9673, 'average_precision': 0.1775, 'precision': 0.7302, 'recall': 0.2021, 'f1': 0.3166, 'auc': 0.8094}
test: {'epoch': 20, 'loss': 0.1115, 'lr': 0.0, 'params': 1506917, 'time_iter': 5.4541, 'accuracy': 0.973, 'average_precision': 0.1853, 'precision': 0.7714, 'recall': 0.2077, 'f1': 0.3273, 'auc': 0.751}
