GraphGymModule(
  (model): GNN(
    (encoder): FeatureEncoder()
    (pre_mp): GeneralMultiLayer(
      (Layer_0): GeneralLayer(
        (layer): Linear(
          (model): Linear(5, 256, bias=False)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (mp): GNNStackStage(
      (layer0): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer1): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer2): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer3): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer4): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer5): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer6): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer7): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer8): GeneralLayer(
        (layer): GeneralConv(
          (model): GeneralConvLayer(256, 256)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (post_mp): GNNRingHead(
      (layer_post_mp): Linear(in_features=256, out_features=5, bias=True)
    )
  )
)
accelerator: cpu
benchmark: False
bn:
  eps: 1e-05
  mom: 0.1
cfg_dest: config.yaml
custom_metrics: []
dataset:
  cache_load: False
  cache_save: False
  dir: ./datasets
  edge_dim: 128
  edge_encoder: False
  edge_encoder_bn: True
  edge_encoder_name: Bond
  edge_message_ratio: 0.8
  edge_negative_sampling_ratio: 1.0
  edge_train_mode: all
  encoder: True
  encoder_bn: True
  encoder_dim: 128
  encoder_name: db
  format: PyG
  label_column: none
  label_table: none
  location: local
  name: RingTransfer
  node_encoder: False
  node_encoder_bn: True
  node_encoder_name: Atom
  remove_feature: False
  resample_disjoint: False
  resample_negative: False
  shuffle_split: True
  split: [0.8, 0.1, 0.1]
  split_mode: random
  task: node
  task_type: classification
  to_undirected: False
  transductive: False
  transform: none
  tu_simple: True
delay:
  max_k: 10
devices: None
gnn:
  act: prelu
  agg: add
  att_final_linear: False
  att_final_linear_bn: False
  att_heads: 1
  batchnorm: True
  clear_feature: True
  dim_inner: 256
  dropout: 0.0
  head: ring_transfer
  keep_edge: 0.5
  l2norm: True
  layer_type: generalconv
  layers_mp: 9
  layers_post_mp: 1
  layers_pre_mp: 1
  msg_direction: single
  normalize_adj: False
  self_msg: concat
  skip_every: 1
  stage_type: stack
gpu_mem: False
mem:
  inplace: False
metric_agg: argmax
metric_best: auto
model:
  edge_decoding: dot
  graph_pooling: add
  loss_fun: cross_entropy
  match_upper: True
  size_average: mean
  thresh: 0.5
  type: gnn
num_threads: 6
num_workers: 10
optim:
  base_lr: 0.01
  lr_decay: 0.1
  max_epoch: 10
  momentum: 0.9
  optimizer: adam
  scheduler: cos
  steps: [30, 60, 90]
  weight_decay: 0.0005
out_dir: my_results/ring_transfer_grid_ring_transfer_grid/ring_transfer-num_nodes=18
print: both
ring_dataset:
  num_classes: 5
  num_graphs: 2000
  num_nodes: 18
round: 4
run_dir: my_results/ring_transfer_grid_ring_transfer_grid/ring_transfer-num_nodes=18/0
seed: 1
share:
  dim_in: 5
  dim_out: 5
  num_splits: 3
  num_tasks: 1
tensorboard_agg: True
tensorboard_each_run: True
train:
  auto_resume: False
  batch_size: 32
  ckpt_clean: True
  ckpt_period: 100
  enable_ckpt: True
  epoch_resume: -1
  eval_period: 20
  iter_per_epoch: 32
  neighbor_sizes: [20, 15, 10, 5]
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
  skip_train_eval: False
  walk_length: 4
val:
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
view_emb: False
Num parameters: 1187343
val: {'epoch': 0, 'loss': 1.4992, 'lr': 0.01, 'params': 1187343, 'time_iter': 34.4566, 'accuracy': 0.0}
val: {'epoch': 0, 'loss': 1.628, 'lr': 0.0098, 'params': 1187343, 'time_iter': 15.4678, 'accuracy': 0.2}
train: {'epoch': 0, 'eta': 47674.0667, 'loss': 1.6275, 'lr': 0.0098, 'params': 1187343, 'time_iter': 84.0812, 'accuracy': 0.1945}
val: {'epoch': 1, 'loss': 1.613, 'lr': 0.009, 'params': 1187343, 'time_iter': 14.0244, 'accuracy': 0.2}
train: {'epoch': 1, 'eta': 48931.6528, 'loss': 1.6218, 'lr': 0.009, 'params': 1187343, 'time_iter': 110.092, 'accuracy': 0.193}
val: {'epoch': 2, 'loss': 1.6246, 'lr': 0.0079, 'params': 1187343, 'time_iter': 27.626, 'accuracy': 0.2}
train: {'epoch': 2, 'eta': 41081.2925, 'loss': 1.623, 'lr': 0.0079, 'params': 1187343, 'time_iter': 85.2913, 'accuracy': 0.197}
val: {'epoch': 3, 'loss': 1.635, 'lr': 0.0065, 'params': 1187343, 'time_iter': 20.6133, 'accuracy': 0.2}
train: {'epoch': 3, 'eta': 36115.017, 'loss': 1.6151, 'lr': 0.0065, 'params': 1187343, 'time_iter': 102.7049, 'accuracy': 0.2145}
