GraphGymModule(
  (model): GNN(
    (encoder): FeatureEncoder(
      (node_encoder): AtomEncoder(
        (atom_embedding_list): ModuleList(
          (0): Embedding(119, 300)
          (1): Embedding(4, 300)
          (2): Embedding(12, 300)
          (3): Embedding(12, 300)
          (4): Embedding(10, 300)
          (5): Embedding(6, 300)
          (6): Embedding(6, 300)
          (7): Embedding(2, 300)
          (8): Embedding(2, 300)
        )
      )
      (node_encoder_bn): BatchNorm1dNode(
        (bn): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (edge_encoder): BondEncoder(
        (bond_embedding_list): ModuleList(
          (0): Embedding(5, 300)
          (1): Embedding(6, 300)
          (2): Embedding(2, 300)
        )
      )
      (edge_encoder_bn): BatchNorm1dNode(
        (bn): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (pre_mp): GeneralMultiLayer(
      (Layer_0): GeneralLayer(
        (layer): Linear(
          (model): Linear(300, 300, bias=False)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (mp): GNNStackStage(
      (layer0): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer1): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer2): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer3): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer4): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer5): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer6): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer7): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer8): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
      (layer9): GeneralLayer(
        (layer): GCNConv(
          (model): GCNConv(300, 300)
        )
        (post_layer): Sequential(
          (0): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): PReLU(num_parameters=1)
        )
      )
    )
    (post_mp): GNNGraphHead(
      (layer_post_mp): MLP(
        (model): Sequential(
          (0): Linear(
            (model): Linear(300, 1, bias=True)
          )
        )
      )
    )
  )
)
accelerator: cuda
benchmark: False
bn:
  eps: 1e-05
  mom: 0.1
cfg_dest: config.yaml
custom_metrics: []
dataset:
  cache_load: False
  cache_save: False
  dir: ./datasets
  edge_dim: 128
  edge_encoder: True
  edge_encoder_bn: True
  edge_encoder_name: Bond
  edge_message_ratio: 0.8
  edge_negative_sampling_ratio: 1.0
  edge_train_mode: all
  encoder: True
  encoder_bn: True
  encoder_dim: 128
  encoder_name: db
  format: OGB
  label_column: none
  label_table: none
  location: local
  name: ogbg-molhiv
  node_encoder: True
  node_encoder_bn: True
  node_encoder_name: Atom
  remove_feature: False
  resample_disjoint: False
  resample_negative: False
  shuffle_split: True
  split: [0.8, 0.1, 0.1]
  split_mode: random
  task: graph
  task_type: classification
  to_undirected: False
  transductive: False
  transform: none
  tu_simple: True
delay:
  max_k: 10
  num_layers: 10
devices: None
gnn:
  act: prelu
  agg: mean
  att_final_linear: False
  att_final_linear_bn: False
  att_heads: 1
  batchnorm: True
  clear_feature: True
  dim_inner: 300
  dropout: 0.0
  head: graph
  keep_edge: 0.5
  l2norm: True
  layer_type: gcnconv
  layers_mp: 10
  layers_post_mp: 1
  layers_pre_mp: 1
  msg_direction: single
  normalize_adj: False
  self_msg: concat
  skip_every: 1
  stage_type: stack
gpu_mem: False
mem:
  inplace: False
metric_agg: argmax
metric_best: auto
model:
  edge_decoding: dot
  graph_pooling: add
  loss_fun: cross_entropy
  match_upper: True
  size_average: mean
  thresh: 0.5
  type: gnn
num_threads: 6
num_workers: 0
optim:
  base_lr: 0.01
  lr_decay: 0.1
  max_epoch: 20
  momentum: 0.9
  optimizer: adam
  scheduler: cos
  steps: [30, 60, 90]
  weight_decay: 0.0005
out_dir: my_results/vanilla_GCN_10_layer
params: 1053912
print: both
round: 4
run_dir: my_results/vanilla_GCN_10_layer/2
seed: 3
share:
  dim_in: 9
  dim_out: 2
  num_splits: 3
tensorboard_agg: True
tensorboard_each_run: False
train:
  auto_resume: False
  batch_size: 128
  ckpt_clean: True
  ckpt_period: 100
  enable_ckpt: True
  epoch_resume: -1
  eval_period: 1
  iter_per_epoch: 32
  neighbor_sizes: [20, 15, 10, 5]
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
  skip_train_eval: False
  walk_length: 4
val:
  node_per_graph: 32
  radius: extend
  sample_node: False
  sampler: full_batch
view_emb: False
Num parameters: 1053912
val: {'epoch': 0, 'loss': 0.8483, 'lr': 0.01, 'params': 1053912, 'time_iter': 0.0664, 'accuracy': 0.0312, 'average_precision': 0.0159, 'precision': 0.0159, 'recall': 1.0, 'f1': 0.0312, 'auc': 0.625}
val: {'epoch': 0, 'loss': 0.1359, 'lr': 0.0099, 'params': 1053912, 'time_iter': 0.8735, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.334}
train: {'epoch': 0, 'eta': 57945.0324, 'loss': 0.2343, 'lr': 0.0099, 'params': 1053912, 'time_iter': 11.8207, 'accuracy': 0.9598, 'average_precision': 0.0375, 'precision': 0.0577, 'recall': 0.0049, 'f1': 0.009, 'auc': 0.427}
val: {'epoch': 1, 'loss': 0.1159, 'lr': 0.0098, 'params': 1053912, 'time_iter': 0.7098, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.336}
train: {'epoch': 1, 'eta': 49472.8992, 'loss': 0.1849, 'lr': 0.0098, 'params': 1053912, 'time_iter': 9.4855, 'accuracy': 0.9626, 'average_precision': 0.0374, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.4131}
val: {'epoch': 2, 'loss': 0.1138, 'lr': 0.0095, 'params': 1053912, 'time_iter': 0.6913, 'accuracy': 0.9801, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.7095}
train: {'epoch': 2, 'eta': 45084.0645, 'loss': 0.1646, 'lr': 0.0095, 'params': 1053912, 'time_iter': 9.5311, 'accuracy': 0.9625, 'average_precision': 0.0385, 'precision': 0.3636, 'recall': 0.0032, 'f1': 0.0064, 'auc': 0.5181}
val: {'epoch': 3, 'loss': 0.1075, 'lr': 0.009, 'params': 1053912, 'time_iter': 0.6963, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.3306}
train: {'epoch': 3, 'eta': 41673.1889, 'loss': 0.1595, 'lr': 0.009, 'params': 1053912, 'time_iter': 9.5437, 'accuracy': 0.9626, 'average_precision': 0.0408, 'precision': 0.5, 'recall': 0.0073, 'f1': 0.0144, 'auc': 0.5711}
val: {'epoch': 4, 'loss': 0.0972, 'lr': 0.0085, 'params': 1053912, 'time_iter': 0.6963, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.669}
train: {'epoch': 4, 'eta': 38620.9479, 'loss': 0.1568, 'lr': 0.0085, 'params': 1053912, 'time_iter': 9.5169, 'accuracy': 0.9623, 'average_precision': 0.0381, 'precision': 0.2353, 'recall': 0.0032, 'f1': 0.0064, 'auc': 0.5975}
val: {'epoch': 5, 'loss': 0.1063, 'lr': 0.0079, 'params': 1053912, 'time_iter': 0.6915, 'accuracy': 0.9793, 'average_precision': 0.0215, 'precision': 0.1667, 'recall': 0.0123, 'f1': 0.023, 'auc': 0.6658}
train: {'epoch': 5, 'eta': 35763.8452, 'loss': 0.1565, 'lr': 0.0079, 'params': 1053912, 'time_iter': 9.5105, 'accuracy': 0.9624, 'average_precision': 0.0399, 'precision': 0.375, 'recall': 0.0073, 'f1': 0.0143, 'auc': 0.603}
val: {'epoch': 6, 'loss': 0.1061, 'lr': 0.0073, 'params': 1053912, 'time_iter': 0.6933, 'accuracy': 0.9786, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.6682}
train: {'epoch': 6, 'eta': 33090.0481, 'loss': 0.1566, 'lr': 0.0073, 'params': 1053912, 'time_iter': 9.6525, 'accuracy': 0.962, 'average_precision': 0.0392, 'precision': 0.2564, 'recall': 0.0081, 'f1': 0.0157, 'auc': 0.6052}
val: {'epoch': 7, 'loss': 0.1468, 'lr': 0.0065, 'params': 1053912, 'time_iter': 0.6919, 'accuracy': 0.9718, 'average_precision': 0.0507, 'precision': 0.2131, 'recall': 0.1605, 'f1': 0.1831, 'auc': 0.71}
train: {'epoch': 7, 'eta': 30445.5195, 'loss': 0.1564, 'lr': 0.0065, 'params': 1053912, 'time_iter': 9.6097, 'accuracy': 0.962, 'average_precision': 0.0377, 'precision': 0.125, 'recall': 0.0024, 'f1': 0.0048, 'auc': 0.612}
val: {'epoch': 8, 'loss': 0.1089, 'lr': 0.0058, 'params': 1053912, 'time_iter': 0.6869, 'accuracy': 0.9784, 'average_precision': 0.0207, 'precision': 0.1, 'recall': 0.0123, 'f1': 0.022, 'auc': 0.6842}
train: {'epoch': 8, 'eta': 27817.037, 'loss': 0.1554, 'lr': 0.0058, 'params': 1053912, 'time_iter': 9.5441, 'accuracy': 0.962, 'average_precision': 0.0387, 'precision': 0.2286, 'recall': 0.0065, 'f1': 0.0126, 'auc': 0.6144}
val: {'epoch': 9, 'loss': 0.0955, 'lr': 0.005, 'params': 1053912, 'time_iter': 0.6926, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.6621}
train: {'epoch': 9, 'eta': 25213.7907, 'loss': 0.1551, 'lr': 0.005, 'params': 1053912, 'time_iter': 9.5132, 'accuracy': 0.9622, 'average_precision': 0.039, 'precision': 0.2759, 'recall': 0.0065, 'f1': 0.0127, 'auc': 0.626}
val: {'epoch': 10, 'loss': 0.1334, 'lr': 0.0042, 'params': 1053912, 'time_iter': 0.6953, 'accuracy': 0.9742, 'average_precision': 0.0273, 'precision': 0.1429, 'recall': 0.0617, 'f1': 0.0862, 'auc': 0.6728}
train: {'epoch': 10, 'eta': 22646.3045, 'loss': 0.1546, 'lr': 0.0042, 'params': 1053912, 'time_iter': 9.5544, 'accuracy': 0.9621, 'average_precision': 0.0389, 'precision': 0.2667, 'recall': 0.0065, 'f1': 0.0127, 'auc': 0.6251}
val: {'epoch': 11, 'loss': 0.0927, 'lr': 0.0035, 'params': 1053912, 'time_iter': 0.692, 'accuracy': 0.9803, 'average_precision': 0.0256, 'precision': 0.5, 'recall': 0.0123, 'f1': 0.0241, 'auc': 0.6757}
train: {'epoch': 11, 'eta': 20101.6182, 'loss': 0.1529, 'lr': 0.0035, 'params': 1053912, 'time_iter': 9.5876, 'accuracy': 0.9623, 'average_precision': 0.0401, 'precision': 0.3704, 'recall': 0.0081, 'f1': 0.0159, 'auc': 0.6426}
val: {'epoch': 12, 'loss': 0.1018, 'lr': 0.0027, 'params': 1053912, 'time_iter': 0.6923, 'accuracy': 0.9801, 'average_precision': 0.0236, 'precision': 0.3333, 'recall': 0.0123, 'f1': 0.0238, 'auc': 0.6756}
train: {'epoch': 12, 'eta': 17561.5228, 'loss': 0.153, 'lr': 0.0027, 'params': 1053912, 'time_iter': 9.542, 'accuracy': 0.9624, 'average_precision': 0.0421, 'precision': 0.4167, 'recall': 0.0122, 'f1': 0.0237, 'auc': 0.648}
val: {'epoch': 13, 'loss': 0.0917, 'lr': 0.0021, 'params': 1053912, 'time_iter': 0.6916, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.6831}
train: {'epoch': 13, 'eta': 15034.2177, 'loss': 0.152, 'lr': 0.0021, 'params': 1053912, 'time_iter': 9.5565, 'accuracy': 0.9625, 'average_precision': 0.0419, 'precision': 0.4643, 'recall': 0.0106, 'f1': 0.0206, 'auc': 0.6446}
val: {'epoch': 14, 'loss': 0.1047, 'lr': 0.0015, 'params': 1053912, 'time_iter': 0.6917, 'accuracy': 0.9803, 'average_precision': 0.0671, 'precision': 0.5, 'recall': 0.0988, 'f1': 0.1649, 'auc': 0.704}
train: {'epoch': 14, 'eta': 12516.8282, 'loss': 0.1525, 'lr': 0.0015, 'params': 1053912, 'time_iter': 9.5761, 'accuracy': 0.9622, 'average_precision': 0.0403, 'precision': 0.3333, 'recall': 0.0097, 'f1': 0.0189, 'auc': 0.6492}
val: {'epoch': 15, 'loss': 0.0932, 'lr': 0.001, 'params': 1053912, 'time_iter': 0.6948, 'accuracy': 0.9813, 'average_precision': 0.0785, 'precision': 0.7, 'recall': 0.0864, 'f1': 0.1538, 'auc': 0.7434}
train: {'epoch': 15, 'eta': 10011.4632, 'loss': 0.1509, 'lr': 0.001, 'params': 1053912, 'time_iter': 9.672, 'accuracy': 0.9624, 'average_precision': 0.0404, 'precision': 0.4, 'recall': 0.0081, 'f1': 0.0159, 'auc': 0.6564}
val: {'epoch': 16, 'loss': 0.0949, 'lr': 0.0005, 'params': 1053912, 'time_iter': 0.6971, 'accuracy': 0.9803, 'average_precision': 0.0197, 'precision': 0.0, 'recall': 0.0, 'f1': 0.0, 'auc': 0.6715}
train: {'epoch': 16, 'eta': 7503.6574, 'loss': 0.1502, 'lr': 0.0005, 'params': 1053912, 'time_iter': 9.5925, 'accuracy': 0.9623, 'average_precision': 0.0438, 'precision': 0.4118, 'recall': 0.017, 'f1': 0.0327, 'auc': 0.6524}
val: {'epoch': 17, 'loss': 0.0876, 'lr': 0.0002, 'params': 1053912, 'time_iter': 0.6911, 'accuracy': 0.981, 'average_precision': 0.1072, 'precision': 0.5652, 'recall': 0.1605, 'f1': 0.25, 'auc': 0.762}
train: {'epoch': 17, 'eta': 4997.4707, 'loss': 0.1429, 'lr': 0.0002, 'params': 1053912, 'time_iter': 9.5214, 'accuracy': 0.9631, 'average_precision': 0.0613, 'precision': 0.6145, 'recall': 0.0414, 'f1': 0.0776, 'auc': 0.6991}
val: {'epoch': 18, 'loss': 0.0964, 'lr': 0.0001, 'params': 1053912, 'time_iter': 0.6933, 'accuracy': 0.9791, 'average_precision': 0.0896, 'precision': 0.4242, 'recall': 0.1728, 'f1': 0.2456, 'auc': 0.7593}
train: {'epoch': 18, 'eta': 2496.2723, 'loss': 0.1403, 'lr': 0.0001, 'params': 1053912, 'time_iter': 9.5036, 'accuracy': 0.9636, 'average_precision': 0.0755, 'precision': 0.6471, 'recall': 0.0625, 'f1': 0.114, 'auc': 0.713}
val: {'epoch': 19, 'loss': 0.0882, 'lr': 0.0, 'params': 1053912, 'time_iter': 0.6955, 'accuracy': 0.9805, 'average_precision': 0.0822, 'precision': 0.5263, 'recall': 0.1235, 'f1': 0.2, 'auc': 0.76}
train: {'epoch': 19, 'eta': 0.0, 'loss': 0.1386, 'lr': 0.0, 'params': 1053912, 'time_iter': 9.6526, 'accuracy': 0.964, 'average_precision': 0.0861, 'precision': 0.6621, 'recall': 0.0779, 'f1': 0.1394, 'auc': 0.7252}
test: {'epoch': 20, 'loss': 0.1211, 'lr': 0.0, 'params': 1053912, 'time_iter': 0.8633, 'accuracy': 0.9696, 'average_precision': 0.0744, 'precision': 0.7273, 'recall': 0.0615, 'f1': 0.1135, 'auc': 0.715}
Results aggregated across runs saved in my_results/vanilla_GCN_10_layer/agg
